Для того чтобы нам использовать сторонний модуль, нам для начала нужно
его установить.

Установим модуль lodash который предоставляет множество удобных и "быстрых"
функций для работы с массивами.

В директории нащего проекта выполним команду

> npm install lodash

Эта команда выполняет 3 действия

1. Скачивает пакет в директорию node_modules в корне проекта
(Если этой директории не было, то она автоматически создается.)
2. Добавляет запись в package.json о том, что пакет lodash стал зависимостью
3. Создает или обновляет файл package-lock.json

Терерь дерево нашего проекта выглядит вот так

project
    - file1.txt
    - file2.txt
    - package.json
    - package-lock.json
    - /node_modules

Зависимости в package.json добавляются под ключом dependencies.
Здесь указаны все пакеты, используемые в проекте и не входящие в
стандартную библиотеку.

  "dependencies": {
    "lodash": "^4.17.21"
  }

В качестве ключа, в зависимостях, указывается имя пакета.
Именно это имя используется при импорте пакета. Значением
является последняя доступная версия на момент скачивания.

Теперь, когда Node.js встречает подобный импорт:

import lodash from "lodash"

Происходит попытка импортировать модуль из node_modules/lodash/...

------

package-lock.json

Если кратко, то у зависимостей нашего проекта есть свои зависимости,
а у них, в свою очередь, свои зависимости (зависимости зависимостей
называются транзитивными зависимостями). Подобная цепочка может быть
довольно длинной и на разных её участках возможно появление одних и
тех же пакетов, но разных версий. package-lock.json содержит описание
всех пакетов, которые будут поставлены, включая все их зависимости с
указанием конкретных версий. Это позволяет получать гарантированно
одни и те же версии зависимостей для всех разработчиков проекта.
Этот файл создаётся командой npm install и потом используется при
установке зависимостей. При наличии package-lock.json в проекте,
установку зависимостей рекомендуется выполнять командой npm ci