В JavaScript существует отдельный класс пакетов-программ, которые связаны
с конкретными проектами. То есть они устанавливаются в проект, но
запускаются как программы, а не импортируются в код как библиотека.
В основном эти программы выполняют различные манипуляции с кодом,
начиная от исправления ошибок, до различных преобразований исходного
кода например с целью работы на более старых версиях интерпретатора или
подготовки кода для работы в браузере.

Одной из таких программ является prettier. Это очень популярный
инструмент, автоматически форматирующий код по общепринятым правилам.
С его помощью команды придерживаются единого стиля написания без
необходимости запоминать эти правила.

Пример кода до обработки:

const fn   = (a, b) => {

     const c = a + b; return c;
   }

   Этот же код после автоматического форматирования:

   const fn = (a, b) => {
     const c = a + b;
     return c;
   };


Так как prettier это инструмент для написания кода, то он должен
устанавливаться как dev зависимость:

> npm install --save-dev prettier

Следующим шагом его нужно запустить как обычную консольную утилиту.
По документации prettier видно что имя утилиты (имя исполняемого файла)
совпадает с именем пакета. Попробуем выполнить запуск:

# Флаг --write означает что мы разрешаем утилите перезаписать
файлы проекта
> prettier --write .


Если вы до этого не устанавливали prettier глобально, то запуск кода
выше приведет к ошибке: command not found: prettier.
Почему так происходит?

Если вы до этого не устанавливали prettier глобально,
то запуск кода выше приведет к ошибке: command not found: prettier.
Почему так происходит?


Локальная установка помещает содержимое пакета node_modules/.bin

и для того чтобы вызвать ее нужно запускать команду

> node_modules/.bin/prettier --write .

У такого запуска есть два неудобства:

1. Слишком долго набирать
2. Идет завязка на конкретную структуру директорий,
которая может поменяться

В данном случае нам поможет npx, который сам найдет нужный путь к
локальному пакету и выполнит его.

> npx prettier --write .


Глобальная помещает их в системные папки, но в таком случае каждому
разработчику работающему над проетом надо будет устанавливать на свой ПК
этот пакет.


Лучше всего такие пакеты использовать локально
Локальные зависимости общие. Любой, кто разрабатывает наш проект,
автоматически получает все зависимости. Если же prettier установлен
глобально, то каждому разработчику придется самостоятельно заботиться
о его установке